while:  loadAI r_arp, @n => r_a   // load n into r_a
        loadI 1 => r_b            // load 1 into r_b
        cmp_GT r_a, r_b => r_cmp  // Line 4: while (n > 1)
        cbr r_cmp -> body, end    // jump to either the body or to the end
body:   loadAI r_arp, @x => r_a   // load x into r_a
        loadAI r_arp, @y => r_b   // load y into r_b
        add r_a, r_b => r_c       // Line 5: z = x+y;
        i2i r_b => r_a            // Line 6: x = y;
        storeAI r_a => r_arp, @x  // store x in memory
        i2i r_c => r_b            // Line 7: y = z;
        storeAI r_c => r_arp, @z  // store z in memory
        storeAI r_b => r_arp, @y  // store y in memory
        loadAI r_arp, @n => r_a   // load n into r_a again
        loadI 1 => r_b            // load 1 into r_b again
        sub r_a, r_b => r_a       // Line 8: n = n-1;
        storeAI r_a => r_arp, @n  // store the new n value in memory
        jumpI -> while            // jump back to the while condition
end:    out "z: ", r_c            // Line 9: return z;